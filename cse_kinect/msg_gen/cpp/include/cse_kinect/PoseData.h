/* Auto-generated by genmsg_cpp for file /home/antonella/fuerte_workspace/sandbox/stingray/cse_kinect/msg/PoseData.msg */
#ifndef CSE_KINECT_MESSAGE_POSEDATA_H
#define CSE_KINECT_MESSAGE_POSEDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cse_kinect
{
template <class ContainerAllocator>
struct PoseData_ {
  typedef PoseData_<ContainerAllocator> Type;

  PoseData_()
  : pose1(false)
  , pose2(false)
  , lVoila(false)
  , rVoila(false)
  , flat(false)
  {
  }

  PoseData_(const ContainerAllocator& _alloc)
  : pose1(false)
  , pose2(false)
  , lVoila(false)
  , rVoila(false)
  , flat(false)
  {
  }

  typedef uint8_t _pose1_type;
  uint8_t pose1;

  typedef uint8_t _pose2_type;
  uint8_t pose2;

  typedef uint8_t _lVoila_type;
  uint8_t lVoila;

  typedef uint8_t _rVoila_type;
  uint8_t rVoila;

  typedef uint8_t _flat_type;
  uint8_t flat;


  typedef boost::shared_ptr< ::cse_kinect::PoseData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cse_kinect::PoseData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PoseData
typedef  ::cse_kinect::PoseData_<std::allocator<void> > PoseData;

typedef boost::shared_ptr< ::cse_kinect::PoseData> PoseDataPtr;
typedef boost::shared_ptr< ::cse_kinect::PoseData const> PoseDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cse_kinect::PoseData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cse_kinect::PoseData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cse_kinect

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cse_kinect::PoseData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cse_kinect::PoseData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cse_kinect::PoseData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1261c601270ddadfdc36b3c644334171";
  }

  static const char* value(const  ::cse_kinect::PoseData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1261c601270ddadfULL;
  static const uint64_t static_value2 = 0xdc36b3c644334171ULL;
};

template<class ContainerAllocator>
struct DataType< ::cse_kinect::PoseData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cse_kinect/PoseData";
  }

  static const char* value(const  ::cse_kinect::PoseData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cse_kinect::PoseData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool pose1\n\
bool pose2\n\
bool lVoila\n\
bool rVoila\n\
bool flat\n\
\n\
";
  }

  static const char* value(const  ::cse_kinect::PoseData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cse_kinect::PoseData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cse_kinect::PoseData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose1);
    stream.next(m.pose2);
    stream.next(m.lVoila);
    stream.next(m.rVoila);
    stream.next(m.flat);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PoseData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cse_kinect::PoseData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cse_kinect::PoseData_<ContainerAllocator> & v) 
  {
    s << indent << "pose1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pose1);
    s << indent << "pose2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pose2);
    s << indent << "lVoila: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lVoila);
    s << indent << "rVoila: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rVoila);
    s << indent << "flat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flat);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CSE_KINECT_MESSAGE_POSEDATA_H

