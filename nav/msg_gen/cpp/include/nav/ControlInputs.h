/* Auto-generated by genmsg_cpp for file /home/uwstereo/fuerte_workspace/sandbox/stingray-2-0/nav/msg/ControlInputs.msg */
#ifndef NAV_MESSAGE_CONTROLINPUTS_H
#define NAV_MESSAGE_CONTROLINPUTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace nav
{
template <class ContainerAllocator>
struct ControlInputs_ {
  typedef ControlInputs_<ContainerAllocator> Type;

  ControlInputs_()
  : header()
  , u_roll(0.0)
  , u_pitch(0.0)
  , u_yaw(0.0)
  , u_depth(0.0)
  , u_surge(0.0)
  {
  }

  ControlInputs_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , u_roll(0.0)
  , u_pitch(0.0)
  , u_yaw(0.0)
  , u_depth(0.0)
  , u_surge(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _u_roll_type;
  float u_roll;

  typedef float _u_pitch_type;
  float u_pitch;

  typedef float _u_yaw_type;
  float u_yaw;

  typedef float _u_depth_type;
  float u_depth;

  typedef float _u_surge_type;
  float u_surge;


  typedef boost::shared_ptr< ::nav::ControlInputs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nav::ControlInputs_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ControlInputs
typedef  ::nav::ControlInputs_<std::allocator<void> > ControlInputs;

typedef boost::shared_ptr< ::nav::ControlInputs> ControlInputsPtr;
typedef boost::shared_ptr< ::nav::ControlInputs const> ControlInputsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::nav::ControlInputs_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::nav::ControlInputs_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace nav

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nav::ControlInputs_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nav::ControlInputs_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nav::ControlInputs_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3b57c87c1174acc91a3d8f917b790174";
  }

  static const char* value(const  ::nav::ControlInputs_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3b57c87c1174acc9ULL;
  static const uint64_t static_value2 = 0x1a3d8f917b790174ULL;
};

template<class ContainerAllocator>
struct DataType< ::nav::ControlInputs_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nav/ControlInputs";
  }

  static const char* value(const  ::nav::ControlInputs_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nav::ControlInputs_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float32 u_roll\n\
float32 u_pitch\n\
float32 u_yaw\n\
float32 u_depth\n\
float32 u_surge\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::nav::ControlInputs_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::nav::ControlInputs_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::nav::ControlInputs_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nav::ControlInputs_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.u_roll);
    stream.next(m.u_pitch);
    stream.next(m.u_yaw);
    stream.next(m.u_depth);
    stream.next(m.u_surge);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ControlInputs_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nav::ControlInputs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::nav::ControlInputs_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "u_roll: ";
    Printer<float>::stream(s, indent + "  ", v.u_roll);
    s << indent << "u_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.u_pitch);
    s << indent << "u_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.u_yaw);
    s << indent << "u_depth: ";
    Printer<float>::stream(s, indent + "  ", v.u_depth);
    s << indent << "u_surge: ";
    Printer<float>::stream(s, indent + "  ", v.u_surge);
  }
};


} // namespace message_operations
} // namespace ros

#endif // NAV_MESSAGE_CONTROLINPUTS_H

