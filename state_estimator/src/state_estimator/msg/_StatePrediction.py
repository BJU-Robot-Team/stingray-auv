"""autogenerated by genpy from state_estimator/StatePrediction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class StatePrediction(genpy.Message):
  _md5sum = "a14638f1c8add4a6304fb5fa95c6157c"
  _type = "state_estimator/StatePrediction"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
float32 lat
float32 lon
float32 depth 
float32 roll 
float32 pitch
float32 yaw
float32 surge
float32 sway
float32 heave
float32 surge_dot
float32 sway_dot
float32 heave_dot
float32 mag_x
float32 mag_y
float32 mag_z

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','lat','lon','depth','roll','pitch','yaw','surge','sway','heave','surge_dot','sway_dot','heave_dot','mag_x','mag_y','mag_z']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,lat,lon,depth,roll,pitch,yaw,surge,sway,heave,surge_dot,sway_dot,heave_dot,mag_x,mag_y,mag_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StatePrediction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lat is None:
        self.lat = 0.
      if self.lon is None:
        self.lon = 0.
      if self.depth is None:
        self.depth = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.surge is None:
        self.surge = 0.
      if self.sway is None:
        self.sway = 0.
      if self.heave is None:
        self.heave = 0.
      if self.surge_dot is None:
        self.surge_dot = 0.
      if self.sway_dot is None:
        self.sway_dot = 0.
      if self.heave_dot is None:
        self.heave_dot = 0.
      if self.mag_x is None:
        self.mag_x = 0.
      if self.mag_y is None:
        self.mag_y = 0.
      if self.mag_z is None:
        self.mag_z = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.lat = 0.
      self.lon = 0.
      self.depth = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.surge = 0.
      self.sway = 0.
      self.heave = 0.
      self.surge_dot = 0.
      self.sway_dot = 0.
      self.heave_dot = 0.
      self.mag_x = 0.
      self.mag_y = 0.
      self.mag_z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_15f.pack(_x.lat, _x.lon, _x.depth, _x.roll, _x.pitch, _x.yaw, _x.surge, _x.sway, _x.heave, _x.surge_dot, _x.sway_dot, _x.heave_dot, _x.mag_x, _x.mag_y, _x.mag_z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.lat, _x.lon, _x.depth, _x.roll, _x.pitch, _x.yaw, _x.surge, _x.sway, _x.heave, _x.surge_dot, _x.sway_dot, _x.heave_dot, _x.mag_x, _x.mag_y, _x.mag_z,) = _struct_15f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_15f.pack(_x.lat, _x.lon, _x.depth, _x.roll, _x.pitch, _x.yaw, _x.surge, _x.sway, _x.heave, _x.surge_dot, _x.sway_dot, _x.heave_dot, _x.mag_x, _x.mag_y, _x.mag_z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.lat, _x.lon, _x.depth, _x.roll, _x.pitch, _x.yaw, _x.surge, _x.sway, _x.heave, _x.surge_dot, _x.sway_dot, _x.heave_dot, _x.mag_x, _x.mag_y, _x.mag_z,) = _struct_15f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_15f = struct.Struct("<15f")
