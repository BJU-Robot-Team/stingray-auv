/* Auto-generated by genmsg_cpp for file /home/uwstereo/fuerte_workspace/sandbox/stingray-2-0/sbBTA252/msg/SBBTA252Data.msg */
#ifndef SBBTA252_MESSAGE_SBBTA252DATA_H
#define SBBTA252_MESSAGE_SBBTA252DATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace sbBTA252
{
template <class ContainerAllocator>
struct SBBTA252Data_ {
  typedef SBBTA252Data_<ContainerAllocator> Type;

  SBBTA252Data_()
  : speed(0.0)
  , current(0.0)
  , motor_temp(0.0)
  , controller_temp(0.0)
  , controller_volt(0.0)
  , water(0.0)
  {
  }

  SBBTA252Data_(const ContainerAllocator& _alloc)
  : speed(0.0)
  , current(0.0)
  , motor_temp(0.0)
  , controller_temp(0.0)
  , controller_volt(0.0)
  , water(0.0)
  {
  }

  typedef float _speed_type;
  float speed;

  typedef float _current_type;
  float current;

  typedef float _motor_temp_type;
  float motor_temp;

  typedef float _controller_temp_type;
  float controller_temp;

  typedef float _controller_volt_type;
  float controller_volt;

  typedef float _water_type;
  float water;


  typedef boost::shared_ptr< ::sbBTA252::SBBTA252Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sbBTA252::SBBTA252Data_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SBBTA252Data
typedef  ::sbBTA252::SBBTA252Data_<std::allocator<void> > SBBTA252Data;

typedef boost::shared_ptr< ::sbBTA252::SBBTA252Data> SBBTA252DataPtr;
typedef boost::shared_ptr< ::sbBTA252::SBBTA252Data const> SBBTA252DataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sbBTA252::SBBTA252Data_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sbBTA252::SBBTA252Data_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sbBTA252

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sbBTA252::SBBTA252Data_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sbBTA252::SBBTA252Data_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sbBTA252::SBBTA252Data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2681e203ad008d492c8f38edd7805fd9";
  }

  static const char* value(const  ::sbBTA252::SBBTA252Data_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2681e203ad008d49ULL;
  static const uint64_t static_value2 = 0x2c8f38edd7805fd9ULL;
};

template<class ContainerAllocator>
struct DataType< ::sbBTA252::SBBTA252Data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sbBTA252/SBBTA252Data";
  }

  static const char* value(const  ::sbBTA252::SBBTA252Data_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sbBTA252::SBBTA252Data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 speed\n\
float32 current\n\
float32 motor_temp\n\
float32 controller_temp\n\
float32 controller_volt\n\
float32 water\n\
\n\
";
  }

  static const char* value(const  ::sbBTA252::SBBTA252Data_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sbBTA252::SBBTA252Data_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sbBTA252::SBBTA252Data_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.speed);
    stream.next(m.current);
    stream.next(m.motor_temp);
    stream.next(m.controller_temp);
    stream.next(m.controller_volt);
    stream.next(m.water);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SBBTA252Data_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sbBTA252::SBBTA252Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sbBTA252::SBBTA252Data_<ContainerAllocator> & v) 
  {
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "motor_temp: ";
    Printer<float>::stream(s, indent + "  ", v.motor_temp);
    s << indent << "controller_temp: ";
    Printer<float>::stream(s, indent + "  ", v.controller_temp);
    s << indent << "controller_volt: ";
    Printer<float>::stream(s, indent + "  ", v.controller_volt);
    s << indent << "water: ";
    Printer<float>::stream(s, indent + "  ", v.water);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SBBTA252_MESSAGE_SBBTA252DATA_H

