"""autogenerated by genpy from pid/PIDRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PIDRequest(genpy.Message):
  _md5sum = "4d3f19ad468f6225a1cf11a4c82adf57"
  _type = "pid/PIDRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 gain_p
float64 gain_i
float64 gain_d
float64 current_val
float64 target_val
float64 previous_error
float64 previous_integrator_val
float64 integral_term_min
float64 integral_term_max
float64 dt

"""
  __slots__ = ['gain_p','gain_i','gain_d','current_val','target_val','previous_error','previous_integrator_val','integral_term_min','integral_term_max','dt']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gain_p,gain_i,gain_d,current_val,target_val,previous_error,previous_integrator_val,integral_term_min,integral_term_max,dt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PIDRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gain_p is None:
        self.gain_p = 0.
      if self.gain_i is None:
        self.gain_i = 0.
      if self.gain_d is None:
        self.gain_d = 0.
      if self.current_val is None:
        self.current_val = 0.
      if self.target_val is None:
        self.target_val = 0.
      if self.previous_error is None:
        self.previous_error = 0.
      if self.previous_integrator_val is None:
        self.previous_integrator_val = 0.
      if self.integral_term_min is None:
        self.integral_term_min = 0.
      if self.integral_term_max is None:
        self.integral_term_max = 0.
      if self.dt is None:
        self.dt = 0.
    else:
      self.gain_p = 0.
      self.gain_i = 0.
      self.gain_d = 0.
      self.current_val = 0.
      self.target_val = 0.
      self.previous_error = 0.
      self.previous_integrator_val = 0.
      self.integral_term_min = 0.
      self.integral_term_max = 0.
      self.dt = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_10d.pack(_x.gain_p, _x.gain_i, _x.gain_d, _x.current_val, _x.target_val, _x.previous_error, _x.previous_integrator_val, _x.integral_term_min, _x.integral_term_max, _x.dt))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.gain_p, _x.gain_i, _x.gain_d, _x.current_val, _x.target_val, _x.previous_error, _x.previous_integrator_val, _x.integral_term_min, _x.integral_term_max, _x.dt,) = _struct_10d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_10d.pack(_x.gain_p, _x.gain_i, _x.gain_d, _x.current_val, _x.target_val, _x.previous_error, _x.previous_integrator_val, _x.integral_term_min, _x.integral_term_max, _x.dt))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.gain_p, _x.gain_i, _x.gain_d, _x.current_val, _x.target_val, _x.previous_error, _x.previous_integrator_val, _x.integral_term_min, _x.integral_term_max, _x.dt,) = _struct_10d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_10d = struct.Struct("<10d")
"""autogenerated by genpy from pid/PIDResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PIDResponse(genpy.Message):
  _md5sum = "12d2a7003b0a8e0851c9897028086206"
  _type = "pid/PIDResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 current_integrator_val
float64 current_error
float64 u


"""
  __slots__ = ['current_integrator_val','current_error','u']
  _slot_types = ['float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       current_integrator_val,current_error,u

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PIDResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.current_integrator_val is None:
        self.current_integrator_val = 0.
      if self.current_error is None:
        self.current_error = 0.
      if self.u is None:
        self.u = 0.
    else:
      self.current_integrator_val = 0.
      self.current_error = 0.
      self.u = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.current_integrator_val, _x.current_error, _x.u))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.current_integrator_val, _x.current_error, _x.u,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.current_integrator_val, _x.current_error, _x.u))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.current_integrator_val, _x.current_error, _x.u,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
class PID(object):
  _type          = 'pid/PID'
  _md5sum = 'bb075cbccfb9d07e9bc04cf20b78a3d2'
  _request_class  = PIDRequest
  _response_class = PIDResponse
