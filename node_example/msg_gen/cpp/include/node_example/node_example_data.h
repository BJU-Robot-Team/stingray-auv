/* Auto-generated by genmsg_cpp for file /home/uwstereo/fuerte_workspace/sandbox/stingray-2-0/node_example/msg/node_example_data.msg */
#ifndef NODE_EXAMPLE_MESSAGE_NODE_EXAMPLE_DATA_H
#define NODE_EXAMPLE_MESSAGE_NODE_EXAMPLE_DATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace node_example
{
template <class ContainerAllocator>
struct node_example_data_ {
  typedef node_example_data_<ContainerAllocator> Type;

  node_example_data_()
  : message()
  , a(0)
  , b(0)
  {
  }

  node_example_data_(const ContainerAllocator& _alloc)
  : message(_alloc)
  , a(0)
  , b(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  message;

  typedef int32_t _a_type;
  int32_t a;

  typedef int32_t _b_type;
  int32_t b;


  typedef boost::shared_ptr< ::node_example::node_example_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::node_example::node_example_data_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct node_example_data
typedef  ::node_example::node_example_data_<std::allocator<void> > node_example_data;

typedef boost::shared_ptr< ::node_example::node_example_data> node_example_dataPtr;
typedef boost::shared_ptr< ::node_example::node_example_data const> node_example_dataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::node_example::node_example_data_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::node_example::node_example_data_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace node_example

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::node_example::node_example_data_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::node_example::node_example_data_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::node_example::node_example_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3192b76bfe6df73dcca63fc0aa4efaf9";
  }

  static const char* value(const  ::node_example::node_example_data_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3192b76bfe6df73dULL;
  static const uint64_t static_value2 = 0xcca63fc0aa4efaf9ULL;
};

template<class ContainerAllocator>
struct DataType< ::node_example::node_example_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "node_example/node_example_data";
  }

  static const char* value(const  ::node_example::node_example_data_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::node_example::node_example_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string message\n\
int32 a\n\
int32 b\n\
\n\
";
  }

  static const char* value(const  ::node_example::node_example_data_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::node_example::node_example_data_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.message);
    stream.next(m.a);
    stream.next(m.b);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct node_example_data_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::node_example::node_example_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::node_example::node_example_data_<ContainerAllocator> & v) 
  {
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "a: ";
    Printer<int32_t>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<int32_t>::stream(s, indent + "  ", v.b);
  }
};


} // namespace message_operations
} // namespace ros

#endif // NODE_EXAMPLE_MESSAGE_NODE_EXAMPLE_DATA_H

